# Configuration for Eddy USB probe. Adapted for SV08 mainline from
# https://github.com/bigtreetech/Eddy/blob/master/sample-bigtreetech-eddy-homing.cfg
# (i.e., using Eddy for both bed mesh and probing, but without using the beta z-offset support).
#
# Follow the guide at https://github.com/bigtreetech/Eddy, but skipping everything
# about configuration except setting the serial path below. (In other words, do only
# mounting, firmware compilation and calibration.) You can find a mount # that allows you
# to fit the Eddy under the regular SV08 shroud (instead of the old probe, in the same place)
# at https://www.printables.com/model/968900-sovol-sv08-btt-eddy-mount.
# If you are connecting the probe in some other way, adjust x_offset and y_offset below
# (see the BTT guide for information).
#
# TODO: It would be nice to use the physical probe to automate the setup completely,
# but that probably requires a fair bit of scripting.

[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_  # Change this to your own path
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2.5
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: -16.5
y_offset: 11.5

[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 200
mesh_min: 15, 15
mesh_max: 330, 330
probe_count: 9, 9
algorithm: bicubic
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

[safe_z_home]
home_xy_position: 172, 172
z_hop: 10
z_hop_speed: 25
speed: 200

###############################Macros and related################################

[gcode_macro G28]
rename_existing: G28.1
gcode:
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}

[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}

[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  SET_GCODE_OFFSET_ORIG { rawparams }

# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}

#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
